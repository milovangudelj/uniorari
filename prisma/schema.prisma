// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["dataProxy"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Docente {
  // Scalars
  id        String   @id @db.Uuid @default(dbgenerated("uuid_generate_v4()"))
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
  nome      String
  cognome   String?
  email     String?  @unique

  // Relations
  corsi   Corso[]
  gruppi  Gruppo[]
  lezioni Lezione[]

  @@map("docenti")
}

model Corso {
  // Scalars
  id        String   @id @db.Uuid @default(dbgenerated("uuid_generate_v4()"))
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
  nome      String

  // Relations
  docenti  Docente[]
  lauree   Laurea[]
  gruppi   Gruppo[]
  // studenti String[] // Previously User[]

  @@map("corsi")
}

model Gruppo {
  // Scalars
  id        String   @id @db.Uuid @default(dbgenerated("uuid_generate_v4()"))
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
  nome      String
  adc       Int?

  // Relations
  docenti  Docente[]
  idLaurea String    @db.Uuid
  laurea   Laurea    @relation(fields: [idLaurea], references: [id])
  corsi    Corso[]
  lezioni  Lezione[]

  @@map("gruppi")
}

model Laurea {
  // Scalars
  id        String   @id @db.Uuid @default(dbgenerated("uuid_generate_v4()"))
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
  nome      String
  scuola    String

  // Relations
  corsi  Corso[]
  gruppi Gruppo[]

  @@map("lauree")
}

model Lezione {
  // Scalars
  id        String   @id @db.Uuid @default(dbgenerated("uuid_generate_v4()"))
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
  giorno    Int
  ora       Int
  inizio    String
  fine      String
  durata    Int

  // Relations
  docenti Docente[]
  gruppi  Gruppo[]
  aule    Aula[]

  @@map("lezioni")
}

model Aula {
  // Scalars
  id        String   @id @db.Uuid @default(dbgenerated("uuid_generate_v4()"))
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
  nome      String
  indirizzo String?
  link      String?

  // Relations
  lezioni Lezione[]

  @@map("aule")
}

// // next-auth models

// model Account {
//   id                String  @db.Uuid @id @default(uuid())
//   userId            String  @map("user_id") @db.Uuid
//   type              String
//   provider          String
//   providerAccountId String  @map("provider_account_id")
//   refresh_token     String?
//   access_token      String?
//   expires_at        Int?
//   token_type        String?
//   scope             String?
//   id_token          String?
//   session_state     String?

//   user User @relation(fields: [userId], references: [id], onDelete: Cascade)

//   @@unique([provider, providerAccountId])
//   @@map("accounts")
// }

// model User {
//   id            String    @db.Uuid @id @default(uuid())
//   name          String?
//   username      String?   @unique
//   email         String?   @unique
//   emailVerified DateTime? @map("email_verified")
//   image         String?
//   accounts      Account[]
//   sessions      Session[]
//   corsi         Corso[]

//   @@map("users")
// }

// model Session {
//   id           String   @db.Uuid @id @default(uuid())
//   sessionToken String   @unique @map("session_token")
//   userId       String   @map("user_id") @db.Uuid
//   expires      DateTime
//   user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

//   @@map("sessions")
// }

// model VerificationToken {
//   identifier String
//   token      String   @unique
//   expires    DateTime

//   @@unique([identifier, token])
//   @@map("verificationtokens")
// }
