// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["dataProxy"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Docente {
  // Scalars
  id      String  @id @default(cuid())
  nome    String
  cognome String?
  email   String? @unique

  // Relations
  corsi   Corso[]
  gruppi  Gruppo[]
  lezioni Lezione[]

  @@map("docenti")
}

model Corso {
  // Scalars
  id     String @id @default(cuid())
  nome   String
  cdl    String
  scuola String

  // Relations
  docenti  Docente[]
  gruppi   Gruppo[]
  studenti User[]

  @@map("corsi")
}

model Gruppo {
  // Scalars
  id   String @id @default(cuid())
  nome String
  adc  Int?

  // Relations
  docenti Docente[]
  idCorso String
  corso   Corso     @relation(fields: [idCorso], references: [id])
  lezioni Lezione[]

  @@map("gruppi")
}

model Lezione {
  // Scalars
  id     String @id @default(cuid())
  giorno Int
  ora    Int
  inizio String
  fine   String
  durata Int

  // Relations
  docenti Docente[]
  gruppi  Gruppo[]
  aule    Aula[]

  @@map("lezioni")
}

model Aula {
  // Scalars
  id        String  @id @default(cuid())
  nome      String
  indirizzo String?
  link      String?

  // Relations
  lezioni Lezione[]

  @@map("aule")
}

// next-auth models

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
  corsi         Corso[]

  @@map("users")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}
